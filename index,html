<!DOCTYPE html>
<html lang="en" >
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Cool Task Routine</title>
  <style>
    /* Reset and base */
    * {
      box-sizing: border-box;
    }
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #667eea, #764ba2);
      color: #fff;
      min-height: 100vh;
      margin: 0;
      display: flex;
      justify-content: center;
      align-items: flex-start;
      padding: 40px 20px;
    }

    .container {
      background: rgba(255, 255, 255, 0.1);
      border-radius: 16px;
      box-shadow: 0 8px 32px rgba(0,0,0,0.25);
      max-width: 480px;
      width: 100%;
      padding: 30px 30px 40px;
      backdrop-filter: blur(10px);
      -webkit-backdrop-filter: blur(10px);
      user-select: none;
    }

    h1 {
      text-align: center;
      margin-bottom: 24px;
      font-weight: 700;
      letter-spacing: 1.5px;
      text-transform: uppercase;
      text-shadow: 0 2px 6px rgba(0,0,0,0.4);
    }

    .input-group {
      display: flex;
      gap: 12px;
      margin-bottom: 24px;
    }

    input[type="text"] {
      flex-grow: 1;
      padding: 14px 18px;
      font-size: 16px;
      border-radius: 12px;
      border: none;
      outline: none;
      box-shadow: inset 0 2px 5px rgba(0,0,0,0.15);
      transition: box-shadow 0.3s ease;
      color: #333;
      font-weight: 600;
    }
    input[type="text"]::placeholder {
      color: #999;
      font-weight: 400;
    }
    input[type="text"]:focus {
      box-shadow: inset 0 2px 8px rgba(0,0,0,0.3);
    }

    button {
      background: #ff6f61;
      border: none;
      padding: 14px 28px;
      color: #fff;
      font-size: 16px;
      border-radius: 12px;
      font-weight: 700;
      cursor: pointer;
      box-shadow: 0 4px 14px rgba(255,111,97,0.6);
      transition: background 0.3s ease, box-shadow 0.3s ease;
      user-select: none;
    }
    button:hover {
      background: #e85c4c;
      box-shadow: 0 6px 20px rgba(232,92,76,0.8);
    }
    button:active {
      transform: scale(0.95);
    }

    ul {
      list-style: none;
      padding: 0;
      margin: 0;
      max-height: 350px;
      overflow-y: auto;
      scrollbar-width: thin;
      scrollbar-color: #ff6f61 transparent;
    }
    ul::-webkit-scrollbar {
      width: 8px;
    }
    ul::-webkit-scrollbar-track {
      background: transparent;
    }
    ul::-webkit-scrollbar-thumb {
      background-color: #ff6f61;
      border-radius: 4px;
    }

    li {
      background: rgba(255, 255, 255, 0.2);
      margin-bottom: 12px;
      padding: 16px 20px;
      border-radius: 12px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      box-shadow: 0 4px 10px rgba(0,0,0,0.15);
      transition: background 0.3s ease;
      font-weight: 600;
      color: #222;
      user-select: text;
    }
    li span {
      color: #222;
      flex-grow: 1;
    }
    .timestamp {
      font-size: 0.85em;
      color: #444;
      font-weight: 400;
      margin-left: 12px;
      font-style: italic;
      white-space: nowrap;
    }
    .delete-btn {
      background: #ff3b3b;
      border: none;
      color: white;
      padding: 8px 14px;
      border-radius: 10px;
      cursor: pointer;
      font-weight: 700;
      font-size: 14px;
      box-shadow: 0 4px 12px rgba(255,59,59,0.7);
      transition: background 0.3s ease, box-shadow 0.3s ease;
      margin-left: 20px;
      user-select: none;
    }
    .delete-btn:hover {
      background: #d73232;
      box-shadow: 0 6px 18px rgba(215,50,50,0.9);
    }
    .delete-btn:active {
      transform: scale(0.95);
    }

    /* No tasks message */
    ul li:empty::before {
      content: "No tasks yet!";
      color: #eee;
      font-style: italic;
      font-weight: 400;
    }

    /* Responsive */
    @media (max-width: 500px) {
      .container {
        padding: 20px 20px 30px;
      }
      input[type="text"] {
        font-size: 14px;
      }
      button {
        padding: 12px 20px;
        font-size: 14px;
      }
      li {
        padding: 12px 16px;
        font-size: 14px;
      }
      .timestamp {
        display: none; /* Hide timestamps on small screens for space */
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Task Routine</h1>

    <div class="input-group">
      <input id="taskInput" type="text" placeholder="Enter your task..." autocomplete="off" />
      <button onclick="addTask()">Add Task</button>
    </div>

    <ul id="taskList"></ul>
  </div>

  <script>
    let tasks = JSON.parse(localStorage.getItem('tasks')) || [];

    function saveTasks() {
      localStorage.setItem('tasks', JSON.stringify(tasks));
    }

    function formatDate(dateStr) {
      const date = new Date(dateStr);
      return date.toLocaleString();
    }

    function renderTasks() {
      const taskList = document.getElementById('taskList');
      taskList.innerHTML = '';
      if (tasks.length === 0) {
        const li = document.createElement('li');
        li.textContent = '';
        li.style.fontStyle = 'italic';
        taskList.appendChild(li);
        return;
      }
      tasks.forEach((task, index) => {
        const li = document.createElement('li');

        const taskSpan = document.createElement('span');
        taskSpan.textContent = task.text;

        const timestampSpan = document.createElement('span');
        timestampSpan.className = 'timestamp';
        timestampSpan.textContent = `(Created: ${formatDate(task.createdAt)})`;

        const deleteBtn = document.createElement('button');
        deleteBtn.className = 'delete-btn';
        deleteBtn.textContent = 'Delete';
        deleteBtn.onclick = () => {
          if (confirm('Delete this task?')) {
            tasks.splice(index, 1);
            saveTasks();
            renderTasks();
          }
        };

        li.appendChild(taskSpan);
        li.appendChild(timestampSpan);
        li.appendChild(deleteBtn);
        taskList.appendChild(li);
      });
    }

    function addTask() {
      const input = document.getElementById('taskInput');
      const text = input.value.trim();
      if (!text) {
        alert('Please enter a task!');
        return;
      }
      tasks.push({ text: text, createdAt: new Date().toISOString() });
      saveTasks();
      renderTasks();
      input.value = '';
      input.focus();
    }

    // Render tasks on page load
    renderTasks();
  </script>
</body>
</html>
